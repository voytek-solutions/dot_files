[core]
	editor = vim
	ui = true

[user]
	name = Wojtek Oledzki
	email = wojtek@voytek.solutions

[push]
	default = simple

[color]
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[alias]
	a = add
	b = branch
	c = commit
	d = diff
	f = fetch
	l = pull
	o = checkout
	p = push
	s = status
	m = "!f() { git fetch origin; git merge --no-ff --no-commit remotes/origin/$1 ; }; f"

	# Delete Gone
	dg = "!f() { d=${1-origin/master}; git branch --merged \"$d\" -vv | grep ': gone]' | awk '{ print $1; }' | xargs git branch -d; }; f"

	# Create Branch
	cb = "!f() { s=$1; d=$2; if [ -z \"$2\" ]; then d=$1; s='origin/master'; fi; git push origin $s:refs/heads/$d ; git fetch origin ; git checkout --track -b $d origin/$d ; }; f"

	# Commits simple List
	cl = "!f() { d=${1-develop}; git log --no-merges --pretty='%s (%an) [%h]' origin/$d..HEAD | grep -v '(ci)' | xargs -I {} echo ' o    {}'; }; f"
	# Committers Names
	cn = "!f() { d=${1-develop}; git log --no-merges --pretty='%an' origin/$d..HEAD | grep -v '^ci' | sort | uniq; }; f"

	df = diff
	lg = log -p
	ll = log -n5
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	ls = ls-files

	branch-find-not-merged = "!f() { for i in `git branch -r | grep tkt-`; do echo \"checking branch $i\"; git cherry -v $1 $i; done }; f"

	df = difftool -x /Applications/DiffMerge.app/Contents/MacOS/DiffMerge
	patch = diff --no-prefix

[difftool]
	prompt = false

[init]
	templatedir = ~/.git_template

[commit]
	template = ~/.git_template/commit_msg.txt

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
